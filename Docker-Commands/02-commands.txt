docker --version

docker run hello-world

docker run -it ubuntu bash ( new container)

docker exec -it my_ubuntu_container bash (already running container)

docker create hello-world

docker search openjdk 

docker pull openjdk:latest

docker run openjdk #exited 

docker run -dit openjdk # run but inside docker terminal since its detached and works in background

docker run -it openjdk # run in same terminal


Create simple Spring Boot Application 
Generate the jar
java -jar target/my-app.jar

# getting inside the openjdk container 
docker exec 19de ls
docker exec 19de ls -a will list all the folder 
docker exec 19de ls /tmp or docker exec 19de ls /usr    as per your requirement we can use any

docker cp target/my-app.jar exciting_volhard:/tmp  go the file location of the spring app

#check and confirm 
docker exec 19de ls /tmp

#now create the image of the container to share it with colleague
docker commit 19de my-image
docker commit 19de my-image:demo-1 with tag

#but by default it will run jshell not my spring boot since default command is jshella
docker run my-image:demo-1 
use this and apply --change CMD with array values 
docker commit --change='CMD ["java","-jar","/tmp/my-app.jar"]' 19de my-image:demo-2
docker run my-image:demo-2

# my app is running inside the docker and it is not accessed outside since its runnign in docker network
docker run -p <expose-port>:<container-port> my-image:demo-2
docker run  -p 8085:8080 my-image:demo-2 

now hit the request 
http://localhost:8085/hello :) 

